# ðŸ§¿ RuneFlip - Solana PvP Coin Flip Game Development Prompt

## Project Overview
Build RuneFlip: a mobile-first, mystical-themed PvP coin flip game on Solana where players stake SOL to duel using animated rune coins. Focus on fast gameplay, secure wallet integration, and real-time matchmaking with immersive animations.

## Core Features Required

### 1. Wallet Integration
- Support Phantom, Solflare, and Backpack wallets
- Display shortened wallet address (e.g., 7tG2...PZfK) and SOL balance
- Require 18+ age verification and Terms acceptance on first connection
- Disable all functionality until wallet connected

### 2. Game Mechanics
- **Minimum stake**: 0.001 SOL
- **Platform fee**: 1% deducted from winnings
- **Multi-game system**: Create/join up to 5 matches simultaneously
- **Match cancellation**: Manual cancel after 3 minutes, auto-refund after 24h
- **Match expiration**: Show countdown timers for open matches
- **Side selection**: Players select Heads/Tails, automatic opposite assignment
- **Balance monitoring**: Real-time balance checks prevent failed transactions
- **Session management**: Auto-disconnect inactive users after timeout

### 3. User Interface Layout
**Top Half - Game Area:**
- Large central animated coin (main game piece)
- Side selector coins (Heads/Tails) flanking the center
- Action buttons: [Create Game] [Join Game] [Multi Create/Join]

**Bottom Half - Information Panels:**
- Left: Scrollable match history (green=win, red=loss)
- Right: Real-time open matches queue

### 4. Visual Design
**Color Scheme:**
- Background: `#0C0D12` (deep obsidian)
- Primary accent: `#3FE0D0` (arcane cyan)
- Secondary: `#9F6CFF` (ethereal purple)
- Win highlight: `#FFD66B` (molten gold)
- Error: `#F54B4B` (arcane red)
- Text: `#F5F5FA` (misty white)

**Animations:**
- **Idle**: Coin pulses with glowing runes every 3 seconds
- **Flip**: 3D spin with particle trails + screen shake on landing (3-4 seconds)
- **Win**: Golden aura burst + screen flash + victory chime
- **Loss**: Subtle fade effect + static flicker sound
- **Mobile**: Haptic vibration feedback for key actions
- **Accessibility**: Reduced motion options for sensitive users

### 5. Backend Requirements (Supabase)
**Database Tables:**
```sql
-- Users table
users (
  wallet_address TEXT PRIMARY KEY,
  join_date TIMESTAMP,
  terms_accepted BOOLEAN,
  terms_accepted_at TIMESTAMP
)

-- Matches table
matches (
  match_id UUID PRIMARY KEY,
  creator_wallet TEXT REFERENCES users(wallet_address),
  joiner_wallet TEXT REFERENCES users(wallet_address),
  stake_amount DECIMAL,
  creator_side TEXT, -- 'heads' or 'tails'
  match_status TEXT, -- 'created', 'joined', 'completed', 'cancelled'
  winner_wallet TEXT,
  winning_side TEXT,
  created_at TIMESTAMP,
  completed_at TIMESTAMP
)

-- Stats table (updated via triggers)
stats (
  wallet_address TEXT PRIMARY KEY REFERENCES users(wallet_address),
  total_games INTEGER DEFAULT 0,
  games_won INTEGER DEFAULT 0,
  games_lost INTEGER DEFAULT 0,
  win_percentage DECIMAL GENERATED ALWAYS AS (games_won::DECIMAL / NULLIF(total_games, 0) * 100) STORED,
  total_staked DECIMAL DEFAULT 0,
  total_winnings DECIMAL DEFAULT 0,
  net_profit DECIMAL GENERATED ALWAYS AS (total_winnings - total_staked) STORED,
  last_updated TIMESTAMP DEFAULT NOW()
)
```

**API Endpoints:**
- `POST /createGame` - Create single match
- `POST /joinGame` - Join existing match  
- `POST /multiCreateGames` - Create multiple matches (up to 5)
- `POST /multiJoinGames` - Join multiple matches (up to 5)
- `POST /cancelGame` - Cancel match after 3 minutes
- `GET /userGames/:wallet` - Get user's active matches
- `GET /history/:wallet` - Get paginated match history
- `GET /stats/:wallet` - Get user statistics
- `GET /openMatches` - Get available matches with countdown timers
- `GET /leaderboard` - Get top 5 winners + all users with 1+ wins

### 6. Random Number Generation & Security
- **RNG**: Supabase Edge Function with cryptographically secure algorithms
- **Seed storage**: Store random_seed in matches table for verification
- **Multi-source entropy**: Server entropy + blockchain hashes + timestamps
- **Audit trail**: Log all RNG calls with timestamps and IP addresses
- **Result verification**: Deterministic outcomes based on unique match IDs

### 7. Input Validation
- Real-time stake amount validation
- Check sufficient balance (including fees)
- Prevent empty side selection
- Visual feedback for all validation states
- Red pulse for errors, disable buttons when invalid

### 8. Mobile Optimization & PWA
- **Responsive design**: Touch-friendly buttons (minimum 44px), thumb-friendly zones
- **PWA features**: manifest.json, offline capabilities, app-like experience
- **Performance**: 60fps animations, optimized for lightweight devices
- **Haptic feedback**: Vibration for key actions (flips, wins, errors)
- **Accessibility**: Screen reader support, high contrast mode, reduced motion
- **Network handling**: Graceful offline/online state transitions

### 9. Side Panel Menu (â‰¡ button, 75% width on mobile)
- **My Profile** - win/loss stats, net profit, total games
- **Leaderboard** - top 5 winners + all users with 1+ wins
- **Settings** - sound toggle, vibration toggle, reduced motion
- **Terms of Use** (modal with scroll-to-activate acceptance)
- **Privacy Policy** (modal, separate from terms)
- **Disconnect Wallet**

### 10. Audio System
- Whoosh sound during flip
- Ping sound on landing
- Chime for wins
- Subtle error sounds
- Global mute toggle

## Technical Requirements

### Frontend Stack
- React.js with hooks for state management
- Solana Web3.js for blockchain integration
- CSS3 animations for coin effects
- Responsive design (mobile-first)

### Backend Stack
- Supabase for database and real-time updates
- Supabase Edge Functions for RNG
- Real-time subscriptions for match updates

### Deployment
- Vercel for frontend hosting
- Automatic GitHub deployment
- Environment variables for API keys

## Key Implementation Notes

1. **State Management**: Use React hooks only (no localStorage/sessionStorage)
2. **Transaction Security**: Atomic database operations prevent double-spending
3. **Error Handling**: Comprehensive validation client/server-side with user-friendly messages
4. **Performance**: Cache leaderboards/stats, optimize database queries with indexes
5. **Real-time Updates**: Supabase subscriptions for live match status changes
6. **Accessibility**: WCAG 2.1 AA compliance, keyboard navigation, screen reader support
7. **Legal Compliance**: Age verification, terms logging, jurisdictional restrictions
8. **Match Integrity**: Secure RNG with audit trails, automatic refunds for timeouts
9. **Mobile First**: Optimized animations, haptic feedback, thumb-friendly UI
10. **PWA Features**: Offline support, app installation, push notifications

## Success Criteria
- Smooth 60fps animations on mobile
- Sub-3 second match creation/joining
- Real-time updates without page refresh
- Secure wallet integration with proper error handling
- Intuitive UI that requires no explanation
- Mystical aesthetic that enhances the gambling experience

Start with basic wallet connection and UI layout, then incrementally add game mechanics, animations, and backend integration.